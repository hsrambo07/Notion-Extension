interface CompletionResult<T> {
    content: T;
    inputTokens: number;
    outputTokens: number;
    costCents: number;
    rawInput: string;
    rawOutput: string;
}
interface CompletionOptions {
    prompt: string;
    schema?: Record<string, unknown>;
    temperature?: number;
    maxTokens?: number;
}
interface LLM {
    readonly modelName: string;
    complete<T = unknown>(options: CompletionOptions): Promise<CompletionResult<T>>;
}

interface GeminiConfig {
    apiKey: string;
    model?: string;
}
declare function createGeminiLLM(config: GeminiConfig): LLM;

interface OpenAIConfig {
    apiKey: string;
    model?: string;
}
declare function createOpenAILLM(config: OpenAIConfig): LLM;

interface AnthropicConfig {
    apiKey: string;
    model?: string;
}
declare function createAnthropicLLM(config: AnthropicConfig): LLM;

interface xAIConfig {
    apiKey: string;
    model?: string;
}
declare function createXAILLM(config: xAIConfig): LLM;

interface CloudflareConfig {
    apiToken: string;
    accountId: string;
    model?: string;
}
declare function createCloudflareAILLM(config: CloudflareConfig): LLM;

interface HttpLLMConfig {
    endpoint: string;
    apiKey?: string;
    headers?: Record<string, string>;
    transformRequest?: (body: unknown) => unknown;
    transformResponse?: (response: unknown) => string;
}
declare function createHttpLLM(config: HttpLLMConfig): LLM;

interface BedrockConfig {
    region?: string;
    access_key?: string;
    secret_key?: string;
    profile?: string;
    model?: string;
}
declare function createBedrockLLM(config: BedrockConfig): LLM;

interface DeepSeekAIConfig {
    apiKey: string;
    model?: string;
}
declare function createDeepSeekAILLM(config: DeepSeekAIConfig): LLM;

interface SpinAiContext {
    input: string;
    sessionId?: string;
    interactionId?: string;
    externalCustomerId?: string;
    state: Record<string, any>;
    isRerun?: boolean;
}

interface Action {
    id: string;
    description: string;
    parameters?: {
        type: "object";
        properties: Record<string, unknown>;
        required?: string[];
    };
    run: (context: SpinAiContext, parameters?: Record<string, unknown>) => Promise<SpinAiContext>;
    dependsOn?: string[];
    retries?: number;
}
interface ActionContext {
    input: string;
    state: Record<string, any>;
}

type DebugMode = "none" | "default" | "verbose" | "all";

interface JSONResponseFormat {
    type: "json";
    schema: {
        type: "object";
        properties: Record<string, unknown>;
        required?: string[];
    };
}
type ResponseFormat = {
    type: "text";
} | JSONResponseFormat;
interface AgentConfig {
    instructions: string;
    actions: Action[];
    llm: LLM;
    agentId?: string;
    spinApiKey?: string;
    training?: {
        systemInstructions?: string;
        completionInstructions?: string;
    };
    responseFormat?: ResponseFormat;
    debug?: DebugMode;
}
interface AgentResponse<T = unknown> {
    response: T;
    sessionId: string;
    interactionId: string;
    totalDurationMs: number;
    totalCostCents: number;
    state: Record<string, unknown>;
}

declare function createAgent<T = string>(config: AgentConfig): {
    (context: SpinAiContext): Promise<AgentResponse<T>>;
    rerun(context: SpinAiContext & {
        sessionId: string;
    }): Promise<AgentResponse<T>>;
};

declare function createAction(config: {
    id: string;
    description: string;
    parameters?: {
        type: "object";
        properties: Record<string, unknown>;
        required?: string[];
    };
    run: (context: SpinAiContext, parameters?: Record<string, unknown>) => Promise<SpinAiContext>;
    dependsOn?: string[];
    retries?: number;
}): Action;

export { type Action, type ActionContext, type AgentConfig, type AgentResponse, type JSONResponseFormat, type ResponseFormat, type SpinAiContext, createAction, createAgent, createAnthropicLLM, createBedrockLLM, createCloudflareAILLM, createDeepSeekAILLM, createGeminiLLM, createHttpLLM, createOpenAILLM, createXAILLM };
